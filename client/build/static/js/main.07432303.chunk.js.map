{"version":3,"sources":["images/pexels-james-wheeler-417074.jpg","components/QuestionCard.styles.ts","API.ts","components/QuestionCard.tsx","utils.ts","App.styles.ts","App.tsx","index.tsx"],"names":["module","exports","Difficulty","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","question","answers","callback","userAnswer","questionNr","totalQuestions","sanitizer","DOMPurify","sanitize","className","dangerouslySetInnerHTML","__html","map","answer","key","correctAnswer","disabled","value","onClick","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","array","incorrect_answers","correct_answer","sort","Math","random","GlobalStyle","createGlobalStyle","BGImage","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","EASY","newQuestions","length","e","currentTarget","prev","anwserObject","undefined","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.07432303.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pexels-james-wheeler-417074.c56ad42f.jpg\";","import styled from 'styled-components'\r\n\r\nexport const Wrapper = styled.div`\r\n    max-width: 1100px;\r\n    background: #ebfeff;\r\n    border-radius: 10px;\r\n    border: 2px solid #0085a3;\r\n    padding: 20px;\r\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n    text-align: center;\r\n    p {\r\n        font-size: 1rem;\r\n    }\r\n`\r\n\r\ntype ButtonWrapperProps = {\r\n    correct: boolean\r\n    userClicked: boolean\r\n}\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n    transition: all 0.3s ease;\r\n    :hover {\r\n        opacity: 0.8;\r\n    }\r\n    button {\r\n        cursor: pointer;\r\n        user-select: none;\r\n        font-size: 0.8rem;\r\n        width: 100%;\r\n        height: 40px;\r\n        margin: 5px 0;\r\n        background: ${({ correct, userClicked }) =>\r\n            correct\r\n                ? 'linear-gradient(90deg, #56FFA4, #59BC86)'\r\n                : !correct && userClicked\r\n                ? 'linear-gradient(90deg, #FF5656, #C16868)'\r\n                : 'linear-gradient(90deg, #56ccff, #6eafb4)'};\r\n        border: 3px solid #ffffff;\r\n        box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\r\n        border-radius: 10px;\r\n        color: #fff;\r\n        text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\r\n    }\r\n`\r\n","import { shuffleArray } from './utils'\r\n\r\nexport type Question = {\r\n    category: string\r\n    correct_answer: string\r\n    difficulty: string\r\n    incorrect_answers: string[]\r\n    question: string\r\n    type: string\r\n}\r\n\r\nexport type QuestionState = Question & { answers: string[] }\r\nexport enum Difficulty {\r\n    EASY = 'easy',\r\n    MEDIUM = 'medium',\r\n    HARD = 'hard',\r\n}\r\n\r\nexport const fetchQuizQuestions = async (\r\n    amount: number,\r\n    difficulty: Difficulty\r\n) => {\r\n    // TODO: Amount not less than 10 error check\r\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`\r\n    const data = await (await fetch(endpoint)).json()\r\n    return data.results.map((question: Question) => ({\r\n        ...question,\r\n        answers: shuffleArray([\r\n            ...question.incorrect_answers,\r\n            question.correct_answer,\r\n        ]),\r\n    }))\r\n}\r\n","import React from 'react'\r\n// Sanisizer\r\nimport DOMPurify from 'dompurify'\r\n// Styles\r\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles'\r\n// Types\r\nimport { AnswerObject } from '../App'\r\n\r\ntype Props = {\r\n    question: string\r\n    answers: string[]\r\n    callback: (e: React.MouseEvent<HTMLButtonElement>) => void\r\n    userAnswer: AnswerObject | undefined\r\n    questionNr: number\r\n    totalQuestions: number\r\n}\r\n\r\nconst QuestionCard: React.FC<Props> = ({\r\n    question,\r\n    answers,\r\n    callback,\r\n    userAnswer,\r\n    questionNr,\r\n    totalQuestions,\r\n}) => {\r\n    const sanitizer = DOMPurify.sanitize\r\n\r\n    return (\r\n        <Wrapper>\r\n            <p className='number'>\r\n                Question: {questionNr} / {totalQuestions}\r\n            </p>\r\n            <p dangerouslySetInnerHTML={{ __html: sanitizer(question) }} />\r\n            <div>\r\n                {answers.map((answer) => (\r\n                    <ButtonWrapper\r\n                        key={answer}\r\n                        // Optional chaining in typescript ?.\r\n                        correct={userAnswer?.correctAnswer === answer}\r\n                        userClicked={userAnswer?.answer === answer}\r\n                    >\r\n                        <button\r\n                            disabled={userAnswer ? true : false}\r\n                            value={answer}\r\n                            onClick={callback}\r\n                        >\r\n                            <span\r\n                                dangerouslySetInnerHTML={{\r\n                                    __html: sanitizer(answer),\r\n                                }}\r\n                            />\r\n                        </button>\r\n                    </ButtonWrapper>\r\n                ))}\r\n            </div>\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nexport default QuestionCard\r\n","export const shuffleArray = (array: any[]) =>\r\n    [...array].sort(() => Math.random() - 0.5)\r\n","import styled, { createGlobalStyle } from 'styled-components'\r\nimport BGImage from './images/pexels-james-wheeler-417074.jpg'\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  html {\r\n    height: 100%;\r\n  }\r\n  body {\r\n    background-image: url(${BGImage});\r\n    background-size: cover;\r\n\r\n    /* background-size:contain; */\r\n    margin: 0;\r\n    padding: 0 20px;\r\n    display: flex;\r\n    justify-content: center;\r\n  }\r\n  * {\r\n    font-family: 'Catamaran', sans-serif;\r\n    box-sizing: border-box;\r\n  }\r\n`\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    > p {\r\n        color: #fff;\r\n    }\r\n    .score {\r\n        color: #fff;\r\n        font-size: 2rem;\r\n        margin: 0;\r\n    }\r\n    h1 {\r\n        font-family: Fascinate Inline;\r\n        background-image: linear-gradient(180deg, #fff, #87f1ff);\r\n        font-weight: 400;\r\n        background-size: 100%;\r\n        background-clip: text;\r\n        -webkit-background-clip: text;\r\n        -webkit-text-fill-color: transparent;\r\n        -moz-background-clip: text;\r\n        -moz-text-fill-color: transparent;\r\n        filter: drop-shadow(2px 2px #0085a3);\r\n        font-size: 70px;\r\n        text-align: center;\r\n        margin: 20px;\r\n    }\r\n    .start,\r\n    .next {\r\n        cursor: pointer;\r\n        background: linear-gradient(180deg, #ffffff, #ffcc91);\r\n        border: 2px solid #d38558;\r\n        box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n        border-radius: 10px;\r\n        height: 40px;\r\n        margin: 20px 0;\r\n        padding: 0 40px;\r\n    }\r\n    .start {\r\n        max-width: 200px;\r\n    }\r\n`\r\n","import React, { useState } from 'react'\nimport QuestionCard from './components/QuestionCard'\nimport { fetchQuizQuestions } from './API'\nimport { QuestionState, Difficulty } from './API'\nimport { GlobalStyle, Wrapper } from './App.styles'\n\nexport type AnswerObject = {\n    question: string\n    answer: string\n    correct: boolean\n    correctAnswer: string\n}\n\nconst TOTAL_QUESTIONS = 10\n\nconst App = () => {\n    const [loading, setLoading] = useState(false)\n    const [questions, setQuestions] = useState<QuestionState[]>([])\n    const [number, setNumber] = useState(0)\n    const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([])\n    const [score, setScore] = useState(0)\n    const [gameOver, setGameOver] = useState(true)\n\n    const startTrivia = async () => {\n        setLoading(true)\n        setGameOver(false)\n        // TODO: Use try catch here and whenever fetching\n        const newQuestions = await fetchQuizQuestions(\n            TOTAL_QUESTIONS,\n            Difficulty.EASY\n        )\n\n        setQuestions(newQuestions)\n        setScore(0)\n        setUserAnswers([])\n        setNumber(0)\n        setLoading(false)\n    }\n    const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n        if (!gameOver) {\n            const answer = e.currentTarget.value\n            // Check the given answer with the correct answer\n            const correct = questions[number].correct_answer === answer\n            // Add score if answer is correct\n            if (correct) setScore((prev) => prev + 1)\n            // Save the answer to the array of userAnswers\n            const anwserObject = {\n                question: questions[number].question,\n                answer,\n                correct,\n                correctAnswer: questions[number].correct_answer,\n            }\n            setUserAnswers((prev) => [...prev, anwserObject])\n        }\n    }\n\n    const nextQuestion = () => {\n        const nextQuestion = number + 1\n        // Move to the next question if it is not the last\n        if (nextQuestion === TOTAL_QUESTIONS) {\n            setGameOver(true)\n        } else {\n            setNumber(nextQuestion)\n        }\n    }\n\n    return (\n        <>\n            <GlobalStyle />\n            <Wrapper>\n                <h1>Quiz</h1>\n                {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n                    <button className='start' onClick={startTrivia}>\n                        Start\n                    </button>\n                ) : null}\n                {!gameOver ? <p className='score'>Score:{score}</p> : null}\n                {loading && <p>Loading Questiones...</p>}\n                {!loading && !gameOver && (\n                    <QuestionCard\n                        question={questions[number].question}\n                        answers={questions[number].answers}\n                        callback={checkAnswer}\n                        userAnswer={\n                            userAnswers ? userAnswers[number] : undefined\n                        }\n                        questionNr={number + 1}\n                        totalQuestions={TOTAL_QUESTIONS}\n                    />\n                )}\n                {!gameOver &&\n                !loading &&\n                userAnswers.length === number + 1 &&\n                number !== TOTAL_QUESTIONS - 1 ? (\n                    <button className='next' onClick={nextQuestion}>\n                        Next Question\n                    </button>\n                ) : null}\n            </Wrapper>\n        </>\n    )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}